import React, { useEffect, useMemo, useState } from 'react';

const STORAGE_KEY = 'aci-animations';

export default function AciPulsingBackground({
  disabled = false,
  intensity = 1,
  showSides = true,
  className = '',
  children,
}) {
  const [reducedMotion, setReducedMotion] = useState(false);
  const [isMobile, setIsMobile] = useState(false);
  const [tabHidden, setTabHidden] = useState(false);
  const [userAnimationEnabled, setUserAnimationEnabled] = useState(true);
  const [autoDownshift, setAutoDownshift] = useState(false);

  useEffect(() => {
    if (typeof window === 'undefined' || !('matchMedia' in window)) {
      return undefined;
    }
    const media = window.matchMedia('(prefers-reduced-motion: reduce)');
    const update = () => setReducedMotion(media.matches);
    update();
    media.addEventListener?.('change', update);
    return () => media.removeEventListener?.('change', update);
  }, []);

  useEffect(() => {
    if (typeof window === 'undefined' || !('matchMedia' in window)) {
      return undefined;
    }
    const media = window.matchMedia('(max-width: 768px)');
    const update = () => setIsMobile(media.matches);
    update();
    media.addEventListener?.('change', update);
    return () => media.removeEventListener?.('change', update);
  }, []);

  useEffect(() => {
    if (typeof document === 'undefined') {
      return undefined;
    }
    const onVisibility = () => setTabHidden(document.visibilityState === 'hidden');
    onVisibility();
    document.addEventListener('visibilitychange', onVisibility);
    return () => document.removeEventListener('visibilitychange', onVisibility);
  }, []);

  useEffect(() => {
    if (typeof window === 'undefined') {
      return undefined;
    }
    try {
      const stored = window.localStorage.getItem(STORAGE_KEY);
      if (stored === 'off') {
        setUserAnimationEnabled(false);
      }
    } catch {
      /* ignore storage reads */
    }
    return undefined;
  }, []);

  useEffect(() => {
    if (typeof window === 'undefined') {
      return undefined;
    }
    try {
      window.localStorage.setItem(STORAGE_KEY, userAnimationEnabled ? 'on' : 'off');
    } catch {
      /* ignore storage issues */
    }
    return undefined;
  }, [userAnimationEnabled]);

  const lowPowerMode = autoDownshift || isMobile;
  const effectiveIntensity = Math.min(
    Math.max(intensity * (lowPowerMode ? 0.85 : 1), 0.4),
    1.4
  );
  const paused = disabled || reducedMotion || tabHidden || !userAnimationEnabled;
  const animationsAllowed = !paused;
  const showStaticBackdrop = paused;

  useEffect(() => {
    if (typeof window === 'undefined') {
      return undefined;
    }
    if (!animationsAllowed || autoDownshift) {
      return undefined;
    }

    let frame = 0;
    let raf = 0;
    const samples = [];
    let last = performance.now();

    const step = now => {
      const delta = now - last;
      last = now;
      if (delta > 0) {
        samples.push(1000 / delta);
      }
      frame += 1;
      if (frame < 120) {
        raf = requestAnimationFrame(step);
      } else {
        const fps = samples.reduce((acc, value) => acc + value, 0) / samples.length;
        if (fps < 40) {
          setAutoDownshift(true);
        }
      }
    };

    raf = requestAnimationFrame(step);
    return () => cancelAnimationFrame(raf);
  }, [animationsAllowed, autoDownshift]);

  const { glowScaleFrom, glowScaleTo, glowOpacity, sweepSpeed, noiseOpacity, railOpacity } = useMemo(() => {
    const clamp = (value, min, max) => Math.min(max, Math.max(min, value));
    const i = clamp(effectiveIntensity, 0.4, 1.6);
    return {
      glowScaleFrom: 0.97 + (i - 1) * 0.06,
      glowScaleTo: 1.08 + (i - 1) * 0.08,
      glowOpacity: 0.22 * i,
      sweepSpeed: 90 / i,
      noiseOpacity: 0.018 * i,
      railOpacity: 0.45 * Math.min(1, i + 0.1),
    };
  }, [effectiveIntensity]);

  const shouldShowRails = showSides && !lowPowerMode && animationsAllowed;
  const shouldShowNoise = animationsAllowed && !lowPowerMode;
  const shouldShowScanlines = animationsAllowed && !lowPowerMode;

  return (
    <div
      className={`relative isolate min-h-screen overflow-hidden bg-[#0f172a] ${className}`}
      style={{
        backgroundImage: `
          radial-gradient(900px_600px_at_70%_20%, rgba(0, 136, 255, 0.10), transparent 60%),
          radial-gradient(640px_640px_at_20%_80%, rgba(0, 255, 255, 0.08), transparent 60%),
          linear-gradient(rgba(255,255,255,0.03) 1px, transparent 1px),
          linear-gradient(90deg, rgba(255,255,255,0.03) 1px, transparent 1px)
        `,
        backgroundSize: 'cover, cover, 64px 64px, 64px 64px',
        backgroundPosition: 'center, center, center, center',
      }}
    >
      {showStaticBackdrop && (
        <div
          aria-hidden
          className="pointer-events-none absolute inset-0"
          style={{
            background:
              'radial-gradient(circle at 50% 35%, rgba(59, 130, 246, 0.5), rgba(16, 185, 129, 0.42) 45%, rgba(15, 118, 110, 0.35) 65%, rgba(15, 23, 42, 0.8) 90%, rgba(8, 11, 22, 0.9) 100%)',
            opacity: 1,
            zIndex: -20,
          }}
        />
      )}

      <div
        aria-hidden
        className="pointer-events-none absolute inset-0"
        style={{
          opacity: glowOpacity,
          filter: 'blur(8px)',
          animation: paused ? 'none' : 'aci-pulse 7.2s ease-in-out infinite',
          transform: 'translateZ(0)',
          willChange: 'transform, opacity',
        }}
      >
        <div
          className="absolute left-1/2 top-1/2 -z-10 h-[118vmax] w-[118vmax] -translate-x-1/2 -translate-y-1/2 rounded-full"
          style={{
            background:
              'radial-gradient(circle at 50% 50%, rgba(0, 180, 255, 0.48), rgba(0, 90, 160, 0.26) 45%, rgba(0, 20, 40, 0.0) 72%)',
            mixBlendMode: 'screen',
          }}
        />
      </div>

      <div aria-hidden className="pointer-events-none absolute inset-0 flex items-center justify-center">
        <div
          className="h-[110vmax] w-[110vmax] max-h-[1320px] max-w-[1320px] rounded-full"
          style={{
            background:
              'conic-gradient(from 0deg, rgba(0,180,255,0.08) 0deg, rgba(0,0,0,0) 70deg, rgba(0,255,255,0.05) 140deg, rgba(0,0,0,0) 210deg, rgba(0,180,255,0.08) 360deg)',
            animation: paused ? 'none' : `aci-rotate ${sweepSpeed}s linear infinite`,
            opacity: 0.38,
            transformOrigin: '50% 50%',
            willChange: 'transform',
          }}
        />
      </div>

      {shouldShowRails && (
        <>
          <div
            aria-hidden
            className="pointer-events-none absolute left-0 top-0 h-full w-[20vw] max-w-[320px]"
            style={{ opacity: railOpacity }}
          >
            <NeuralRail paused={paused} side="left" />
          </div>
          <div
            aria-hidden
            className="pointer-events-none absolute right-0 top-0 h-full w-[20vw] max-w-[320px]"
            style={{ opacity: railOpacity }}
          >
            <NeuralRail paused={paused} side="right" />
          </div>
        </>
      )}

      <NanoNodes paused={paused || lowPowerMode} />

      <div
        aria-hidden
        className="pointer-events-none absolute inset-0 opacity-[0.06]"
        style={{
          backgroundImage:
            'radial-gradient(circle at 20px 20px, rgba(255,255,255,0.18) 1px, transparent 1.2px)',
          backgroundSize: '40px 40px',
          maskImage: 'radial-gradient(80%_80% at 50% 50%, black 50%, transparent 100%)',
        }}
      />

      <div
        aria-hidden
        className="pointer-events-none absolute inset-0"
        style={{
          background:
            'radial-gradient(120%_120% at 50%_60%, rgba(0,0,0,0) 40%, rgba(0,0,0,0.32) 70%, rgba(0,0,0,0.75) 100%)',
        }}
      />

      {shouldShowScanlines && (
        <div
          aria-hidden
          className="pointer-events-none absolute inset-0"
          style={{
            backgroundImage: 'linear-gradient(rgba(255,255,255,0.02) 1px, transparent 1px)',
            backgroundSize: '100% 4px',
            animation: paused ? 'none' : 'aci-scan 8s linear infinite',
            opacity: 0.16,
            willChange: 'background-position',
          }}
        />
      )}

      {shouldShowNoise && (
        <div
          aria-hidden
          className="pointer-events-none absolute inset-0"
          style={{
            opacity: noiseOpacity,
            backgroundImage:
              "url('data:image/svg+xml;utf8,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"120\" height=\"120\" viewBox=\"0 0 120 120\"><filter id=\"n\"><feTurbulence type=\"fractalNoise\" baseFrequency=\"0.9\" numOctaves=\"2\" stitchTiles=\"stitch\"/></filter><rect width=\"120\" height=\"120\" filter=\"url(%23n)\" opacity=\"0.6\"/></svg>')",
            backgroundSize: 'cover',
            animation: paused ? 'none' : 'aci-noise-shift 4.2s steps(3,end) infinite',
            mixBlendMode: 'soft-light',
          }}
        />
      )}

      <div className="relative z-10">{children}</div>

      <button
        type="button"
        onClick={() => setUserAnimationEnabled(prev => !prev)}
        className="fixed bottom-6 right-6 z-50 inline-flex items-center gap-2 rounded-full border border-white/20 bg-black/60 px-4 py-2 text-xs font-semibold text-white/80 shadow-lg backdrop-blur transition hover:border-emerald-400 hover:text-emerald-200"
      >
        {userAnimationEnabled ? 'DÃ©sactiver animations' : 'Activer animations'}
      </button>

      <style>{`
        @keyframes aci-pulse {
          0%   { transform: translateZ(0) scale(${glowScaleFrom}); }
          50%  { transform: translateZ(0) scale(${glowScaleTo}); }
          100% { transform: translateZ(0) scale(${glowScaleFrom}); }
        }
        @keyframes aci-rotate { from { transform: rotate(0deg);} to { transform: rotate(360deg);} }
        @keyframes aci-noise-shift { 0%{filter:contrast(110%) brightness(112%);} 50%{filter:contrast(102%) brightness(102%);} 100%{filter:contrast(110%) brightness(112%);} }
        @keyframes aci-scan { 0%{background-position-y:0;} 100%{background-position-y:820px;} }
      `}</style>
    </div>
  );
}

function NeuralRail({ paused, side = 'left' }) {
  const flip = side === 'right' ? 1 : -1;
  const basePaths = [0, 1, 2];
  return (
    <div className="relative h-full w-full">
      <div
        className="absolute inset-0"
        style={{
          background:
            'linear-gradient(to bottom, rgba(0, 180, 255, 0.12), rgba(0, 255, 255, 0.05) 45%, rgba(0,0,0,0))',
          maskImage: `linear-gradient(to ${side === 'right' ? 'left' : 'right'}, black 55%, transparent 100%)`,
          filter: 'blur(0.25px)',
        }}
      />
      <div
        className="absolute inset-0"
        style={{
          backgroundImage:
            'repeating-linear-gradient( to bottom, rgba(0,200,255,0.1), rgba(0,200,255,0.1) 1px, transparent 1px, transparent 18px )',
          transform: `skewX(${4 * flip}deg)`,
        }}
      />
      <div
        className="absolute inset-0"
        style={{
          backgroundImage: 'linear-gradient(90deg, transparent, rgba(0, 220, 255, 0.16), transparent)',
          backgroundSize: '220% 100%',
          animation: paused ? 'none' : 'rail-sweep 24s linear infinite',
        }}
      />
      <svg
        className="absolute inset-y-0"
        style={{ [side]: 0, width: '100%', height: '100%' }}
        viewBox="0 0 100 720"
        preserveAspectRatio="none"
      >
        {basePaths.map(i => (
          <path
            key={i}
            d={`M ${side === 'right' ? 100 : 0},${60 + i * 200} C 50,${60 + i * 200} 50,${140 + i * 200} ${
              side === 'right' ? 0 : 100
            },${140 + i * 200}`}
            fill="none"
            stroke="url(#grad)"
            strokeWidth="1"
            style={{
              strokeDasharray: '8 16',
              animation: paused ? 'none' : `dash-flow ${12 + i * 3}s linear infinite`,
              opacity: 0.68 - i * 0.15,
            }}
          />
        ))}
        <defs>
          <linearGradient id="grad" x1="0%" y1="0%" x2="100%" y2="0%">
            <stop offset="0%" stopColor="rgba(0,200,255,0.0)" />
            <stop offset="50%" stopColor="rgba(0,200,255,0.8)" />
            <stop offset="100%" stopColor="rgba(0,200,255,0.0)" />
          </linearGradient>
        </defs>
      </svg>
      <style>{`
        @keyframes dash-flow { to { stroke-dashoffset: -220; } }
        @keyframes rail-sweep { 0%{background-position:220% 0} 100%{background-position:-220% 0} }
      `}</style>
    </div>
  );
}

function NanoNodes({ paused }) {
  return (
    <div className="pointer-events-none absolute inset-0">
      {Array.from({ length: 6 }).map((_, index) => (
        <div
          key={index}
          className="absolute left-1/2 top-1/2"
          style={{
            width: 0,
            height: 0,
            transform: `translate(-50%, -50%) rotate(${(360 / 6) * index}deg)`,
          }}
        >
          <div
            className="absolute"
            style={{
              left: `${20 + (index % 3) * 10}vmax`,
              top: `${(index % 2 === 0 ? 1 : -1) * 2}vmax`,
              width: '6px',
              height: '6px',
              borderRadius: '9999px',
              boxShadow: '0 0 10px rgba(0,210,255,0.75)',
              background:
                'radial-gradient(circle, rgba(180,255,255,0.9), rgba(0,210,255,0.7) 60%, rgba(0,210,255,0.0) 70%)',
              animation: paused ? 'none' : `node-orbit ${14 + (index % 3) * 2}s ease-in-out infinite alternate`,
              opacity: 0.55,
              transformOrigin: 'center',
            }}
          />
        </div>
      ))}
      <style>{`
        @keyframes node-orbit {
          0% { transform: translateY(-5px) scale(0.9); filter: brightness(0.9); }
          100% { transform: translateY(5px) scale(1.05); filter: brightness(1.05); }
        }
      `}</style>
    </div>
  );
}
  useEffect(() => {
    if (typeof window === 'undefined') {
      return undefined;
    }
    try {
      const stored = window.localStorage.getItem(STORAGE_KEY);
      if (stored === 'off') {
        setUserAnimationEnabled(false);
      }
    } catch {
      /* ignore storage read issues */
    }
    return undefined;
  }, []);
