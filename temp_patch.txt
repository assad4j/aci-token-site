import '@rainbow-me/rainbowkit/styles.css';
import { connectorsForWallets, RainbowKitProvider } from '@rainbow-me/rainbowkit';
import {
  metaMaskWallet,
  walletConnectWallet,
  coinbaseWallet,
  trustWallet,
  rainbowWallet,
  rabbyWallet,
  okxWallet,
  ledgerWallet,
} from '@rainbow-me/rainbowkit/wallets';
import { WagmiConfig, configureChains, createConfig } from 'wagmi';
import { publicProvider } from 'wagmi/providers/public';
import { jsonRpcProvider } from 'wagmi/providers/jsonRpc';
import { mainnet, goerli, sepolia } from 'wagmi/chains';
import { PRESALE_CONFIG } from './config/presale';

const FALLBACK_WALLETCONNECT_PROJECT_ID = '21fef48091f12692cad574a6f7753643';
const rawProjectId = process.env.REACT_APP_WALLETCONNECT_PROJECT_ID;
const normalizedProjectId =
  rawProjectId && rawProjectId.trim() && rawProjectId.trim() !== 'TON_PROJECT_ID_ICI'
    ? rawProjectId.trim()
    : FALLBACK_WALLETCONNECT_PROJECT_ID;

if (normalizedProjectId === FALLBACK_WALLETCONNECT_PROJECT_ID) {
  // eslint-disable-next-line no-console
  console.warn(
    '[walletConfig] WalletConnect projectId non fourni. Utilisation d’un projectId partagé pour le développement. Configurez REACT_APP_WALLETCONNECT_PROJECT_ID pour la production.'
  );
}

const projectId = normalizedProjectId;

const chainMap = {
  [mainnet.id]: mainnet,
  [goerli.id]: goerli,
  [sepolia.id]: sepolia,
};

const targetChain = chainMap[PRESALE_CONFIG.chainId] ?? mainnet;
const supportedChains = [targetChain];

const rpcUrl = process.env.REACT_APP_PRESALE_RPC_URL;

const providers = [
  rpcUrl
    ? jsonRpcProvider({
        rpc: chain => {
          if (chain.id !== targetChain.id) {
            return null;
          }
          return { http: rpcUrl };
        },
      })
    : null,
  publicProvider(),
].filter(Boolean);

const { chains, publicClient } = configureChains(supportedChains, providers);

const recommendedWallets = [
  metaMaskWallet({ chains, projectId }),
  trustWallet({ chains, projectId }),
  coinbaseWallet({ appName: 'ACI Meta Coach', chains }),
  walletConnectWallet({ chains, projectId }),
];

const additionalWallets = [
  rainbowWallet({ chains, projectId }),
  rabbyWallet({ chains }),
  okxWallet({ chains, projectId }),
  ledgerWallet({ chains, projectId }),
];

const connectors = connectorsForWallets([
  {
    groupName: 'Recommandé',
    wallets: recommendedWallets,
  },
  {
    groupName: 'Autres portefeuilles',
    wallets: additionalWallets,
  },
]);

const wagmiConfig = createConfig({
  autoConnect: true,
  connectors,
  publicClient,
});

export const walletEnabled = true;
export { chains };

export function WalletProvider({ children }) {
  return (
    <WagmiConfig config={wagmiConfig}>
      <RainbowKitProvider chains={chains}>
        {children}
      </RainbowKitProvider>
    </WagmiConfig>
  );
}
